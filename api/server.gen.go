// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /config)
	GetConfig(ctx echo.Context) error

	// (GET /tle)
	GetTLEList(ctx echo.Context, params GetTLEListParams) error

	// (GET /tle/{satellite})
	FindASatelliteByName(ctx echo.Context, satellite string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetTLEList converts echo context to params.
func (w *ServerInterfaceWrapper) GetTLEList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTLEListParams
	// ------------- Optional query parameter "group" -------------

	err = runtime.BindQueryParameter("form", true, false, "group", ctx.QueryParams(), &params.Group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTLEList(ctx, params)
	return err
}

// FindASatelliteByName converts echo context to params.
func (w *ServerInterfaceWrapper) FindASatelliteByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "satellite" -------------
	var satellite string

	err = runtime.BindStyledParameterWithLocation("simple", false, "satellite", runtime.ParamLocationPath, ctx.Param("satellite"), &satellite)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter satellite: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindASatelliteByName(ctx, satellite)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/tle", wrapper.GetTLEList)
	router.GET(baseURL+"/tle/:satellite", wrapper.FindASatelliteByName)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SWX2/bNhDAvwrB7W2C/kWVbT3NS9PBQNYGTfrUBQEjnWS2FKmSp7RB4O8+HGVbVmw0",
	"BbYBW17CUPf/frzLEy9N2xkNGh0vnrgr19AKf7yw1lg6dNZ0YFGCvy5NBfS7NrYVyAsuNZ6lPOD42MHw",
	"JzRg+SbgLTgnGi+9/ejQSt3wzSbgFr700kLFi4+DzVH+dm/M3H+CEsnWtUBQSqK3JpR6V/Pi4/PYtGj9",
	"9wpcaWWH0mhejKqMvodjqLtoAq6NFdWdrI6V3757v3zNSoFCmYatXpP6D6SOCu6U1HCXHJu8ubxg9I0l",
	"J2PZq6bfUU1PqD4rqi/GQWqToCZujut9G3D4JtpOwVhWfvHh5uLyennDZstDu0U6X2T5NGWesHSezGcf",
	"WJzF8XzJGEuTs2wR5nkSz7J8wVgY00+SJoz50y/xeIgZWywW82mUBU8Ho4yxJMxfJTPG5otwls9mpJjl",
	"+Zwl+SJMz+KMpfMsPEtnGYnGcZov4nTB8myeZ75O12AfwJ4bXcvmGHFRVZIKLtTV5P6oVZVAcedMb8sf",
	"gPxQ+LjiJC11bYYnplGUSEdohVS84KVopVIQlmvTgvq1oeuwNC01YujO+SDBzr0ED3hvSXGN2LkiihqJ",
	"6/6eVKI3vf4s/aOawrW8WrHaWIZrYARaZ82DrMAy56vFA65kCdodMvHH6ubIVbk2xoHYCnuX27OLWomR",
	"hxxs697V1AdJxfPKRRS5r6JpwIbSRF4kIgYkEod8EtPyasUD/gDWDcEnYRzGZNl0oEUnecHP/FXAO4Fr",
	"37+o3De8ATx+Xe8Be6udL4B7dAgtGzR6K7yItz6cVxUv+O+AW4ao1a4zlCPZTeN410jQ3pPoOiVLrxp9",
	"cuRuN2zp9LOFmhf8p2icxtF2FEcTVj0n06jPD0NkuzCoFFmcfXcaGmS16XVFsq/+wYiHzXEi1JVGsFoo",
	"NuTEdoIBR9E4eiTbNG/pLsJh/LzYKyUQHHpmQaOV4DzHQqmhlbuMXfjnyR7eXF5cSoceFStaQLDObxdJ",
	"nr70YB/Hd9ZY03c8OCgF6L6l2BswZF3DV7gnARRWSf354LGPk+F5Oq34Jtu+Zbpv78EyU1Mje4WOoWHW",
	"58qDk/Eo2UqcxPPieqLx/rdwlQite5Hb/cbe7EMQ1orHU2Q0MPRPSYcThv8jXL4WKEYqo6c9U5sXCaW0",
	"dmPVdVDKWkI1QnkE5Bupq+W+eL89vh32+DM0p76IBYJmb5WwqQHL9Y4aGoIjNIfexx2FtodDkJ5Te/tv",
	"TrmRluP+UAn/54NtB9Am4MM6Hdo4bs4iipQphVobN/wDttXcr9rdBgj2N97m5nbzVwAAAP//xfK4kMUL",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
