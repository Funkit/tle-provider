// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /tle)
	GetTLEList(ctx echo.Context, params GetTLEListParams) error

	// (GET /tle/{satellite})
	FindASatelliteByName(ctx echo.Context, satellite string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTLEList converts echo context to params.
func (w *ServerInterfaceWrapper) GetTLEList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTLEListParams
	// ------------- Optional query parameter "group" -------------

	err = runtime.BindQueryParameter("form", true, false, "group", ctx.QueryParams(), &params.Group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTLEList(ctx, params)
	return err
}

// FindASatelliteByName converts echo context to params.
func (w *ServerInterfaceWrapper) FindASatelliteByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "satellite" -------------
	var satellite string

	err = runtime.BindStyledParameterWithLocation("simple", false, "satellite", runtime.ParamLocationPath, ctx.Param("satellite"), &satellite)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter satellite: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindASatelliteByName(ctx, satellite)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tle", wrapper.GetTLEList)
	router.GET(baseURL+"/tle/:satellite", wrapper.FindASatelliteByName)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVS2/bRhD+K4tpbyX4MkNJPFVNnEKAmwSxc0oDY00NqU32wewOnRgG/3uxS0nUw3BS",
	"9FJfvOLO45tvvpl9hNqozmjU5KB6BFdvUPFwvLTWWH/orOnQksDwuTZr9P8bYxUnqEBousghAnrocPyJ",
	"LVoYIlDoHG+D9fbSkRW6hWGIwOLXXlhcQ/VxjDnZf9oHM3efsSYf65oTSikoRONSvm2g+niKTXMV7tfo",
	"ais6EkZDNbkyfx9PUHdoItDG8vWtWJ87v3n7fvmK1Zy4NC1bvfLuP1E6SbyVQuNtdh7y5uqS+TuWPYll",
	"75o/45o/4XpCaiDjoLQjUEdpzvn+FAF+56qTONEKlx9uLq+ulzdstjyMW+XzRVEelwwZy+fZfPaBpUWa",
	"zpeMsTy7KBZxWWbprCgXjMWp/8vyjLFw+i2dDilji8VifoyygnwMyhjL4vJFNmNsvohn5WzmHYuynLOs",
	"XMT5RVqwfF7EF/ms8KZpmpeLNF+wspiXBQyDZ0roxoxy1sRr8kdUXEiooOZKSIlxvTEK5e+t/xzXRvmi",
	"RyZejhbsZbCACHrrHTdEnauSpBW06e+8S/K6119EEPBxI5fvVqwxltEGmW9qZ829WKNlDu09WohAihq1",
	"O+T/r9XNWap6Y4xDvjUOKbdnlyhBSRAUWuXeNtdo70WNW+cqSdw33rZoY2GSYJJ4vgX5nsMRpuW7FURw",
	"j9aN4LM4jVMf2XSoeSeggovwKYKO0yaMYkKjdlqkcxm/R+qtdqF6yQkdBRJQkxXoAjFcynDtdsPr4r81",
	"hJSW+zCrNVTwJ9LN1eWVcBRyW66Q0LqwGoTP9LVH+zA1rrWm7yDarrnQdN0rPy0tGh9d4ze88wbErRT6",
	"y8FsTGN2Wo7i34XqFdO9ukPLTMMsul6SY2SYDbVC9CQeKZSgIzw/3C1+Ni26zvgee488TXdCRh3I5l0n",
	"RR1YSj47D/HxIIMgVMHxV4sNVPBLMj0ByXb/J9O6HfYQuLX8AcL0HNff4tg/KRyxHTbv+OJfQnsO0fgc",
	"PZF9pQmt5pJdh9Fhe8MhCipMHvcaGn6oSF/Gbi5dh7VoBK4nEZ4J8LXQ6+WerD8e3oxL90SKx7l8771I",
	"9lG9TBqkerNTiZ+iSSSH2acFT7bHQ+GcqvS/yuQn1XHeD0/hoQiKtHj2TTbEGtPr9f9AMEME4/4d2zat",
	"2ipJpKm53BjnX8fhnwAAAP//voyWxTcJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
